ConfigMap
前面的课程中我们学习了Servie的使用，Service是Kubernetes系统中非常重要的一个核心概念，我们还会在后面 的课程中继续学习Service的一些使用方法的。这节课我们来学习另外一个非常重要的资源对象：ConfigMap，我们知道许多应用经常会有从配置文件、命令行参数或者环境变量中读取一些配置信息，这些配置信息我们肯定不会直接写死到应用程序中去的，比如你一个应用连接一个redis服务，下一次想更换一个了的，还得重新去修改代码，重新制作一个镜像，这肯定是不可取的，而ConfigMap就给我们提供了向容器中注入配置信息的能力，不仅可以用来保存单个属性，也可以用来保存整个配置文件，比如我们可以用来配置一个redis服务的访问地址，也可以用来保存整个redis的配置文件。

创建
ConfigMap 资源对象使用key-value形式的键值对来配置数据，这些数据可以在Pod里面使用，ConfigMap和我们后面要讲到的Secrets比较类似，一个比较大的区别是ConfigMap可以比较方便的处理一些非敏感的数据，比如密码之类的还是需要使用Secrets来进行管理。我们来举个例子说明下ConfigMap的使用方法：

cat << EOF > cm-demo1.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: cm-demo1
  namespace: default
data:
  data.1: hello
  data.2: world
  config: |
    property.1=value-1
    property.2=value-2
    property.3=value-3
EOF




[root@Master ~]# kubectl create -f cm-demo1.yaml
configmap "cm-demo" created

[root@Master ~]# kubectl  get cm
NAME      DATA      AGE
cm-demo   3         8s

[root@Master ~]# kubectl  describe cm cm-demo1
Name:         cm-demo1
Namespace:    default
Labels:       <none>
Annotations:  <none>

Data
====
config:
----
property.1=value-1
property.2=value-2
property.3=value-3

data.1:
----
hello
data.2:
----
world
Events:  <none>




    
其中配置数据在data属性下面进行配置，前两个被用来保存单个属性，后面一个被用来保存一个配置文件。

当然同样的我们可以使用kubectl create -f xx.yaml来创建上面的ConfigMap对象.

[root@Master ~]# kubectl  create -f cm-demo1.yaml
configmap "cm-demo1" created

[root@Master ~]# kubectl get cm
NAME       DATA      AGE
cm-demo1   3         32s


[root@Master ~]# kubectl get cm cm-demo1 -o yaml
apiVersion: v1
data:
  config: |
    property.1=value-1
    property.2=value-2
    property.3=value-3
  data.1: hello
  data.2: world
kind: ConfigMap
metadata:
  creationTimestamp: 2018-10-26T02:22:32Z
  name: cm-demo1
  namespace: default
  resourceVersion: "145398"
  selfLink: /api/v1/namespaces/default/configmaps/cm-demo1
  uid: fe731e63-d8c5-11e8-b5fd-000c291d813e




但是如果我们不知道怎么创建ConfigMap的话，不要忘记kubectl是我们最好的老师，
可以使用kubectl create configmap -h来查看关于创建ConfigMap的帮助信息，

Examples:
  # Create a new configmap named my-config based on folder bar
  kubectl create configmap my-config --from-file=path/to/bar

  # Create a new configmap named my-config with specified keys instead of file basenames on disk
  kubectl create configmap my-config --from-file=key1=/path/to/bar/file1.txt --from-file=key2=/path/to/bar/file2.txt

  # Create a new configmap named my-config with key1=config1 and key2=config2
  kubectl create configmap my-config --from-literal=key1=config1 --from-literal=key2=config2

我们可以看到可以从一个给定的目录来创建一个ConfigMap对象，比如我们有一个testcm的目录，该目录下面包含一些配置文件，redis和mysql的连接信息，如下：

mkdir testcm  

 cat <<EOF> testcm/redis.conf
host=127.0.0.1
port=6379
EOF
 cat <<EOF>  testcm/mysql.conf
host=127.0.0.1
port=3306
EOF



$ ls testcm
redis.conf
mysql.conf


然后我们可以使用from-file关键字来创建包含这个目录下面所以配置文件的ConfigMap：

$ kubectl create configmap cm-demo2 --from-file=testcm
configmap "cm-demo1" created

其中from-file参数指定在该目录下面的所有文件都会被用在ConfigMap里面创建一个键值对，键的名字就是文件名，值就是文件的内容。

创建完成后，同样我们可以使用如下命令来查看ConfigMap列表：

[root@Master ~]# kubectl get cm
NAME       DATA      AGE
cm-demo1   3         3m
cm-demo2   2         30s


可以看到已经创建了一个cm-demo1的ConfigMap对象，然后可以使用describe命令查看详细信息：

[root@Master ~]# kubectl  describe cm cm-demo2
Name:         cm-demo2
Namespace:    default
Labels:       <none>
Annotations:  <none>

Data
====
mysql.conf:
----
host=127.0.0.1
port=3306

redis.conf:
----
host=127.0.0.1
port=6379

Events:  <none>



我们可以看到两个key是testcm目录下面的文件名称，对应的value值的话就是文件内容，这里值得注意的是如果文件里面的配置信息很大的话，describe的时候可能不会显示对应的值，要查看键值的话，可以使用如下命令：

[root@Master ~]# kubectl  describe cm cm-demo2
Name:         cm-demo2
Namespace:    default
Labels:       <none>
Annotations:  <none>

Data
====
mysql.conf:
----
host=127.0.0.1
port=3306

redis.conf:
----
host=127.0.0.1
port=6379

Events:  <none>




$ kubectl get configmap cm-demo1 -o yaml
apiVersion: v1
data:
  mysql.conf: |
    host=127.0.0.1
    port=3306
  redis.conf: |
    host=127.0.0.1
    port=6379
kind: ConfigMap
metadata:
  creationTimestamp: 2018-06-14T16:24:36Z
  name: cm-demo1
  namespace: default
  resourceVersion: "3109975"
  selfLink: /api/v1/namespaces/default/configmaps/cm-demo1
  uid: 6e0f4d82-6fef-11e8-a101-525400db4df7


除了通过文件目录进行创建，我们也可以使用指定的文件进行创建ConfigMap，同样的，以上面的配置文件为例，我们创建一个redis的配置的一个单独ConfigMap对象：




$ kubectl create configmap cm-demo3 --from-file=testcm/redis.conf
configmap "cm-demo2" created



[root@Master ~]# kubectl get cm
NAME       DATA      AGE
cm-demo1   3         6m
cm-demo2   2         3m
cm-demo3   1         23s


[root@Master ~]# kubectl  describe cm cm-demo3
Name:         cm-demo3
Namespace:    default
Labels:       <none>
Annotations:  <none>

Data
====
redis.conf:
----
host=127.0.0.1
port=6379

Events:  <none>


[root@Master ~]# kubectl get configmap cm-demo3 -o yaml
apiVersion: v1
data:
  redis.conf: |
    host=127.0.0.1
    port=6379
kind: ConfigMap
metadata:
  creationTimestamp: 2018-10-26T02:28:43Z
  name: cm-demo3
  namespace: default
  resourceVersion: "145846"
  selfLink: /api/v1/namespaces/default/configmaps/cm-demo3
  uid: dbc2d863-d8c6-11e8-b5fd-000c291d813e




我们可以看到一个关联redis.conf文件配置信息的ConfigMap对象创建成功了，另外值得注意的是--from-file这个参数可以使用多次，比如我们这里使用两次分别指定redis.conf和mysql.conf文件，就和直接指定整个目录是一样的效果了。

另外，通过帮助文档我们可以看到我们还可以直接使用字符串进行创建，通过--from-literal参数传递配置信息，同样的，这个参数可以使用多次，格式如下：


[root@Master ~]# kubectl create cm cm-demo4 --from-literal=db.host=localhost --from-literal=db.port=3306
configmap "cm-demo4" created


[root@Master ~]# kubectl  get cm
NAME       DATA      AGE
cm-demo1   3         10m
cm-demo2   2         7m
cm-demo3   1         4m
cm-demo4   2         17s


[root@Master ~]# kubectl  describe cm cm-demo4
Name:         cm-demo4
Namespace:    default
Labels:       <none>
Annotations:  <none>

Data
====
db.host:
----
localhost
db.port:
----
3306
Events:  <none>



[root@Master ~]# kubectl get cm cm-demo4 -o yaml
apiVersion: v1
data:
  db.host: localhost
  db.port: "3306"
kind: ConfigMap
metadata:
  creationTimestamp: 2018-10-26T02:32:39Z
  name: cm-demo4
  namespace: default
  resourceVersion: "146132"
  selfLink: /api/v1/namespaces/default/configmaps/cm-demo4
  uid: 688ddcdf-d8c7-11e8-b5fd-000c291d813e





使用

ConfigMap创建成功了，那么我们应该怎么在Pod中来使用呢？我们说ConfigMap这些配置数据可以通过很多种方式在Pod里使用，主要有以下几种方式：

设置环境变量的值
在容器里设置命令行参数
在数据卷里面创建config文件



首先，我们使用ConfigMap来填充我们的环境变量：

cat << EOF > cmtest1-pod.yaml
apiVersion: v1
kind: Pod
metadata:
  name: testcm1-pod
spec:
  containers:
    - name: testcm1
      image: busybox
      command: [ "/bin/sh", "-c", "env" ]
      env:
        - name: DB_HOST
          valueFrom:
            configMapKeyRef:
              name: cm-demo4
              key: db.host
        - name: DB_PORT
          valueFrom:
            configMapKeyRef:
              name: cm-demo4
              key: db.port
      envFrom:
        - configMapRef:
            name: cm-demo2
EOF



[root@Master ~]# kubectl  create -f cmtest1-pod.yaml
pod "testcm1-pod" created

[root@Master ~]# kubectl  get po
NAME                              READY     STATUS              RESTARTS   AGE
testcm1-pod                       0/1       ContainerCreating   0          5s



这个Pod运行后会输出如下几行：

$ kubectl logs testcm1-pod
......
DB_HOST=localhost
DB_PORT=3306
mysql.conf=host=127.0.0.1
port=3306
redis.conf=host=127.0.0.1
port=6379
......


我们可以看到DB_HOST和DB_PORT都已经正常输出了，另外的环境变量是因为我们这里直接把cm-demo1给注入进来了，所以把他们的整个键值给输出出来了，这也是符合预期的。

另外我们可以使用ConfigMap来设置命令行参数，ConfigMap也可以被用来设置容器中的命令或者参数值，如下Pod:

cat << EOF > cmtest2-pod.yaml
apiVersion: v1
kind: Pod
metadata:
  name: testcm2-pod
spec:
  containers:
    - name: testcm2
      image: busybox
      command: [ "/bin/sh", "-c", "echo \$(DB_HOST) \$(DB_PORT)" ]
      env:
        - name: DB_HOST
          valueFrom:
            configMapKeyRef:
              name: cm-demo4
              key: db.host
        - name: DB_PORT
          valueFrom:
            configMapKeyRef:
              name: cm-demo4
              key: db.port
EOF





[root@Master ~]# kubectl  create -f cmtest2-pod.yaml
pod "testcm2-pod" created


[root@Master ~]# kubectl  get po | grep cm
testcm1-pod                       0/1       CrashLoopBackOff   7          13m
testcm2-pod                       0/1       CrashLoopBackOff   1          16s


[root@Master ~]# kubectl  logs testcm2-pod
localhost 3306


 
另外一种是非常常见的使用ConfigMap的方式：通过数据卷使用，在数据卷里面使用ConfigMap，就是将文件填入数据卷，在这个文件中，键就是文件名，键值就是文件内容：


cat << EOF > cmtest3-pod.yaml
apiVersion: v1
kind: Pod
metadata:
  name: testcm4-pod
spec:
  containers:
    - name: testcm4
      image: busybox
      command: [ "/bin/sh", "-c", "cat /etc/config/redis.conf" ]
      volumeMounts:
      - name: config-volume
        mountPath: /etc/config
  volumes:
    - name: config-volume
      configMap:
        name: cm-demo3
EOF




[root@Master ~]# kubectl  create -f cmtest3-pod.yaml
pod "testcm4-pod" created


[root@Master ~]# kubectl  get po | grep cm
testcm4-pod                       0/1       CrashLoopBackOff   1          20s


[root@Master ~]# kubectl  logs testcm4-pod
host=127.0.0.1
port=6379





当然我们也可以在ConfigMap值被映射的数据卷里去控制路径，如下Pod定义：


cat << EOF > cmtest4-pod.yaml
apiVersion: v1
kind: Pod
metadata:
  name: testcm5-pod
spec:
  containers:
    - name: testcm4
      image: busybox
      command: [ "/bin/sh","-c","cat /etc/config/path/to/msyql.conf" ]
      volumeMounts:
      - name: config-volume
        mountPath: /etc/config
  volumes:
    - name: config-volume
      configMap:
        name: cm-demo2
        items:
        - key: mysql.conf
          path: path/to/msyql.conf
EOF




[root@Master ~]# kubectl  create -f cmtest4-pod.yaml
pod "testcm5-pod" created



运行这个Pod的，查看日志：

[root@Master ~]# kubectl logs testcm5-pod
host=127.0.0.1
port=3306



另外需要注意的是，当ConfigMap以数据卷的形式挂载进Pod的时，这时更新ConfigMap（或删掉重建ConfigMap），Pod内挂载的配置信息会热更新。这时可以增加一些监测配置文件变更的脚本，然后reload对应服务。
