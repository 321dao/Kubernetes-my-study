集群监控（cAdvisor+Heapster+InfluxDB+Grafana）
 
cAdvisor：容器数据收集。默认已安装，数据是实时的，不做持久存储， Heapster主动获取每个节点cAdvisor数据，并将数据传送给InfluxDB做持久化存储，Grafana则把InfluxDB存储的数据通过可视化的方式展示

Heapster：集群监控数据收集，汇总所有节点监控数据。
InfluxDB：时序数据库，存储监控数据。
Grafana：可视化展示。

访问cAdvisor
 


[root@Master01 lnmp]# mkdir monitor
[root@Master01 lnmp]# cd monitor/
上传三个文件
C:\Users\Administrator\Desktop\k8s刘振良 腾讯课程学习记录\Kubernetes企业级Docker容器集群管理平台实践 - 课件\Heapster+InfluxDB+Grafana
[root@Master01 monitor]# ls
grafana.yaml  heapster.yaml  influxdb.yaml



[root@Master01 monitor]# cat influxdb.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: monitoring-influxdb
  namespace: kube-system
spec:
  replicas: 1
  template:
    metadata:
      labels:
        task: monitoring
        k8s-app: influxdb
    spec:
      containers:
      - name: influxdb
        image: registry.cn-hangzhou.aliyuncs.com/google-containers/heapster-influxdb-amd64:v1.1.1
        volumeMounts:
        - mountPath: /data
          name: influxdb-storage
      volumes:
      - name: influxdb-storage
        emptyDir: {}

---

apiVersion: v1
kind: Service
metadata:
  labels:
    task: monitoring
    # For use as a Cluster add-on (https://github.com/kubernetes/kubernetes/tree/master/cluster/addons)
    # If you are NOT using this as an addon, you should comment out this line.
    kubernetes.io/cluster-service: 'true'
    kubernetes.io/name: monitoring-influxdb
  name: monitoring-influxdb
  namespace: kube-system
spec:
  ports:
  - port: 8086
    targetPort: 8086
  selector:
    k8s-app: influxdb





[root@Master01 monitor]#  kubectl create -f influxdb.yaml
deployment "monitoring-influxdb" created
service "monitoring-influxdb" created





[root@Master01 monitor]# cat heapster.yaml
apiVersion: v1
kind: ServiceAccount  #赋予权限
metadata:
  name: heapster
  namespace: kube-system

---

kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: heapster
subjects:
  - kind: ServiceAccount
    name: heapster
    namespace: kube-system
roleRef:
  kind: ClusterRole
  name: cluster-admin
  apiGroup: rbac.authorization.k8s.io

---

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: heapster
  namespace: kube-system
spec:
  replicas: 1
  template:
    metadata:
      labels:
        task: monitoring
        k8s-app: heapster
    spec:
      serviceAccountName: heapster
      containers:
      - name: heapster
        image: registry.cn-hangzhou.aliyuncs.com/google-containers/heapster-amd64:v1.4.2
        imagePullPolicy: IfNotPresent
        command:
        - /heapster
        - --source=kubernetes:https://kubernetes.default
        - --sink=influxdb:http://monitoring-influxdb:8086

---

apiVersion: v1
kind: Service
metadata:
  labels:
    task: monitoring
    # For use as a Cluster add-on (https://github.com/kubernetes/kubernetes/tree/master/cluster/addons)
    # If you are NOT using this as an addon, you should comment out this line.
    kubernetes.io/cluster-service: 'true'
    kubernetes.io/name: Heapster
  name: heapster
  namespace: kube-system
spec:
  ports:
  - port: 80
    targetPort: 8082
  selector:
    k8s-app: heapster



- --source=kubernetes:https://kubernetes.default  kubernetes.default查询解析

[root@Master01 monitor]# kubectl describe svc kubernetes
Name:              kubernetes
Namespace:         default
Labels:            component=apiserver
                   provider=kubernetes
Annotations:       <none>
Selector:          <none>
Type:              ClusterIP
IP:                10.254.0.1
Port:              https  443/TCP
TargetPort:        6443/TCP
Endpoints:         192.168.224.181:6443,192.168.224.182:6443 
Session Affinity:  ClientIP
Events:            <none>

只要指定一个api server就行

解析到
[root@Master01 ~]# kubectl exec -it busybox sh
/ # nslookup kubernetes.default
Server:    10.254.0.2
Address 1: 10.254.0.2 kube-dns.kube-system.svc.cluster.local

Name:      kubernetes.default
Address 1: 10.254.0.1 kubernetes.default.svc.cluster.local
 




     - --sink=influxdb:http://monitoring-influxdb:8086  查找

[root@Master01 monitor]# kubectl get svc -n kube-system
NAME                  TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)         AGE
heapster              ClusterIP   10.254.127.49    <none>        80/TCP          17h
kube-dns              ClusterIP   10.254.0.2       <none>        53/UDP,53/TCP   17h
monitoring-grafana    NodePort    10.254.166.32    <none>        80:39700/TCP    17h
monitoring-influxdb   ClusterIP   10.254.250.123   <none>        8086/TCP        17h




[root@Master01 monitor]# kubectl get all -n  kube-system
NAME                         DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE
deploy/monitoring-influxdb   1         1         1            1           16s

NAME                              DESIRED   CURRENT   READY     AGE
rs/monitoring-influxdb-5d4db8b9   1         1         1         16s

NAME                         DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE
deploy/monitoring-influxdb   1         1         1            1           16s

NAME                              DESIRED   CURRENT   READY     AGE
rs/monitoring-influxdb-5d4db8b9   1         1         1         16s

NAME                                    READY     STATUS    RESTARTS   AGE
po/monitoring-influxdb-5d4db8b9-txxj8   1/1       Running   0          16s

NAME                      TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)    AGE
svc/monitoring-influxdb   ClusterIP   10.254.250.123   <none>        8086/TCP   16s


/ # [root@Master01 ~]# kubectl get svc -n kube-system
NAME                  TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)         AGE
kube-dns              ClusterIP   10.254.0.2       <none>        53/UDP,53/TCP   11m
monitoring-influxdb   ClusterIP   10.254.250.123   <none>        8086/TCP        19m


[root@Master01 monitor]# kubectl create -f heapster.yaml

[root@Master01 monitor]# kubectl create -f grafana.yaml


[root@Master01 monitor]# cat grafana.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: monitoring-grafana
  namespace: kube-system
spec:
  replicas: 1
  template:
    metadata:
      labels:
        task: monitoring
        k8s-app: grafana
    spec:
      containers:
      - name: grafana
        image: registry.cn-hangzhou.aliyuncs.com/google-containers/heapster-grafana-amd64:v4.4.1  #要匹配上,不匹配上会导致不可用的
        ports:
          - containerPort: 3000
            protocol: TCP
        volumeMounts:   
        - mountPath: /var   #数据卷挂载到宿主机上
          name: grafana-storage
        env:
        - name: INFLUXDB_HOST
          value: monitoring-influxdb
        - name: GRAFANA_PORT
          value: "3000"
          # The following env variables are required to make Grafana accessible via
          # the kubernetes api-server proxy. On production clusters, we recommend
          # removing these env variables, setup auth for grafana, and expose the grafana
          # service using a LoadBalancer or a public IP.
        - name: GF_AUTH_BASIC_ENABLED
          value: "false"
        - name: GF_AUTH_ANONYMOUS_ENABLED
          value: "true"
        - name: GF_AUTH_ANONYMOUS_ORG_ROLE
          value: Admin
        - name: GF_SERVER_ROOT_URL
          # If you're only using the API Server proxy, set this value instead:
          value: /api/v1/proxy/namespaces/kube-system/services/monitoring-grafana/  #通过proxy代理端口,需要通过api非安全端口,
          #value: /
      volumes:
      - name: grafana-storage
        emptyDir: {}

---

apiVersion: v1
kind: Service
metadata:
  labels:
    # For use as a Cluster add-on (https://github.com/kubernetes/kubernetes/tree/master/cluster/addons)
    # If you are NOT using this as an addon, you should comment out this line.
    kubernetes.io/cluster-service: 'true'
    kubernetes.io/name: monitoring-grafana
  name: monitoring-grafana
  namespace: kube-system
spec:
  # In a production setup, we recommend accessing Grafana through an external Loadbalancer
  # or through a public IP.
  # type: LoadBalancer
  type: NodePort
  ports:
  - port : 80
    targetPort: 3000
  selector:
    k8s-app: grafana


          value: /api/v1/proxy/namespaces/kube-system/services/monitoring-grafana/  #通过proxy代理端口,需要通过api非安全端口,
也就是这个
[root@Master01 monitor]# ps uxa | grep kube-apiserver
root       945  2.4 23.3 422120 235568 ?       Ssl  10:56   1:36 /usr/k8s/bin/kube-apiserver --admission-control=NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,ResourceQuota --advertise-address=192.168.224.181 --bind-address=0.0.0.0 --insecure-bind-address=192.168.224.181--authorization-mode=Node,RBAC --runtime-config=rbac.authorization.k8s.io/v1alpha1 --kubelet-https=true --enable-bootstrap-token-auth --token-auth-file=/etc/kubernetes/token.csv --service-cluster-ip-range=10.254.0.0/16 --service-node-port-range=20000-40000 --tls-cert-file=/etc/kubernetes/ssl/kubernetes.pem --tls-private-key-file=/etc/kubernetes/ssl/kubernetes-key.pem --client-ca-file=/etc/kubernetes/ssl/ca.pem --service-account-key-file=/etc/kubernetes/ssl/ca-key.pem --etcd-cafile=/etc/kubernetes/ssl/ca.pem --etcd-certfile=/etc/kubernetes/ssl/kubernetes.pem --etcd-keyfile=/etc/kubernetes/ssl/kubernetes-key.pem --etcd-servers=https://192.168.224.181:2379,https://192.168.224.182:2379,https://192.168.224.183:2379 --enable-swagger-ui=true --allow-privileged=true --apiserver-count=2 --audit-log-maxage=30 --audit-log-maxbackup=3 --audit-log-maxsize=100 --audit-log-path=/var/lib/audit.log --audit-policy-file=/etc/kubernetes/audit-policy.yaml --event-ttl=1h --logtostderr=true --v=6 
[root@Master01 monitor]# cat /root/kube-apiserver.service
[Unit]
Description=Kubernetes API Server
Documentation=https://github.com/GoogleCloudPlatform/kubernetes
After=network.target

[Service]
ExecStart=/usr/k8s/bin/kube-apiserver \
  --admission-control=NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,ResourceQuota \
  --advertise-address=192.168.224.181 \
  --bind-address=0.0.0.0 \
  --insecure-bind-address=192.168.224.181 \ #修改为本机ip
  --authorization-mode=Node,RBAC \
  --runtime-config=rbac.authorization.k8s.io/v1alpha1 \
  --kubelet-https=true \
然后通过192.168.224.181:8080/api/v1/proxy/namespaces/kube-system/services/monitoring-grafana/ 访问




阳明安装方法


十二、部署 Heapster 插件
到 heapster release 页面下载最新版的 heapster

已上传
yum -y install wget
cd /usr/local/src && wget https://github.com/kubernetes/heapster/archive/v1.4.3.tar.gz &&  tar -xzvf v1.4.3.tar.gz




部署相关文件目录：/usr/local/src/heapster-1.4.3/deploy/kube-config

 cd /usr/local/src/heapster-1.4.3/deploy/kube-config/; ls influxdb/ 

grafana.yaml  heapster.yaml  influxdb.yaml

ls rbac/

heapster-rbac.yaml


为方便测试访问，修改 grafana.yaml下面的服务类型设置为type=NodePort

修改 influxdb.yaml、grafana.yaml、heapster.yaml的 image 镜像地址
 
注意：因实际操作中无法docker pull heapster-amd64镜像，所以

从本机搜索   heapster-amd64.tar 

3个Node节点上
 

rz -E        heapster-amd64.tar 

docker load < heapster-amd64.tar

docker tag gcr.io/google_containers/heapster-amd64:v1.4.2 index.tenxcloud.com/jimmy/heapster-amd64:v1.3.0-beta.1
 
 


在Master01上

sed -i '62s/  # type: NodePort/  type: NodePort/' influxdb/grafana.yaml

sed -i 's@gcr.io/google_containers/heapster-grafana-amd64:v4.2.0@index.tenxcloud.com/jimmy/heapster-grafana-amd64:v4.0.2@' influxdb/grafana.yaml


sed -i 's@gcr.io/google_containers/heapster-amd64:v1.3.0@index.tenxcloud.com/jimmy/heapster-amd64:v1.3.0-beta.1@' influxdb/heapster.yaml


sed -i 's@gcr.io/google_containers/heapster-influxdb-amd64:v1.1.1@index.tenxcloud.com/jimmy/heapster-influxdb-amd64:v1.1.1@' influxdb/influxdb.yaml






执行所有文件

$ kubectl create -f rbac/heapster-rbac.yaml
clusterrolebinding "heapster" created

$ kubectl create -f influxdb
deployment "monitoring-grafana" created
service "monitoring-grafana" created
serviceaccount "heapster" created
deployment "heapster" created
service "heapster" created
deployment "monitoring-influxdb" created
service "monitoring-influxdb" created

检查执行结果
检查 Deployment
$ kubectl get deployments -n kube-system | grep -E 'heapster|monitoring'
heapster               1         1         1            1           29m
monitoring-grafana     1         1         1            1           29m
monitoring-influxdb    1         1         1            1           29m

检查 Pods
$ kubectl get pods -n kube-system | grep -E 'heapster|monitoring'
heapster-9bd589759-nz29g                1/1       Running   0          30m
monitoring-grafana-5c8d68cb94-xtszf     1/1       Running   0          30m
monitoring-influxdb-774cf8fcc6-b7qw7    1/1       Running   0          30m

访问 grafana

上面我们修改grafana 的Service 为NodePort 类型：

[root@k8s-master01 kube-config]# kubectl get svc -n kube-system
NAME                   TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)         AGE
heapster               ClusterIP   10.254.170.2     <none>        80/TCP          30m
kube-dns               ClusterIP   10.254.0.2       <none>        53/UDP,53/TCP   1h
kubernetes-dashboard   NodePort    10.254.204.176   <none>        80:32092/TCP    48m
monitoring-grafana     NodePort    10.254.112.219   <none>        80:30879/TCP    30m
monitoring-influxdb    ClusterIP   10.254.109.148   <none>        8086/TCP        30m


则我们就可以通过任意一个节点加上上面的30879端口就可以访问grafana 了。


