Service – 服务发现

服务发现支持 Service 环境变量和 DNS 两种模式 ：
 环境变量
当一个Pod运行到Node，kubelet会为每个容器添加一组环境变量，Pod容器中程序就可以使用这些环境变量发现Service。
环境变量名格式如下：
{SVCNAME}_SERVICE_HOST
{SVCNAME}_SERVICE_PORT
其中服务名和端口名转为大写，连字符转换为下划线。
限制：
1）Pod和Service的创建顺序是有要求的，Service必须在Pod创建之前被创建，否则环境变量不会设置到Pod中。
2）Pod只能获取同Namespace中的Service环境变量。
 DNS
DNS服务监视Kubernetes API，为每一个Service创建DNS记录用于域名解析。这样Pod中就可以通过DNS域名获取Service的访问地址。


场景：部署了三个副本tomcat，一个mysql，请问三个tomcat副本如何与mysql通信？
service负载均衡功能帮忙实现
[root@Master01 service]# kubectl get svc
NAME            TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)          AGE
my-tomcat   ClusterIP   10.254.69.214    <none>        88/TCP           5h
通过10.254.69.214:88 就可以访问tomcat这组服务了。
[root@Master01 busybox]# vim busybox.yaml

apiVersion: v1
kind: Pod
metadata:
  name: busybox
spec:
  containers:
  - image: busybox
    command:
      - sleep
      - "3600"
    imagePullPolicy: IfNotPresent
    name: busybox
  restartPolicy: Always

[root@Master01 busybox]# kubectl create -f busybox.yaml
pod "busybox" created

[root@Master01 busybox]# kubectl get po
NAME                               READY     STATUS    RESTARTS   AGE
busybox                            1/1       Running   0          1m


[root@Master01 busybox]# kubectl exec -it busybox sh
/ # env
NGINX_DS_SERVICE_PORT=80
KUBERNETES_SERVICE_PORT=443
KUBERNETES_PORT=tcp://10.254.0.1:443
NGINX_DS_PORT=tcp://10.254.45.130:80
HOSTNAME=busybox
EXPOSE_NGINX_PORT_88_TCP=tcp://10.254.158.168:88
SHLVL=1
HOME=/root
NGINX_DS_PORT_80_TCP_ADDR=10.254.45.130
NGINX_DS_PORT_80_TCP_PORT=80
NGINX_DS_PORT_80_TCP_PROTO=tcp
EXPOSE_NGINX_SERVICE_HOST=10.254.158.168
TERM=xterm
EXPOSE_NGINX_PORT=tcp://10.254.158.168:88
EXPOSE_NGINX_SERVICE_PORT=88
KUBERNETES_PORT_443_TCP_ADDR=10.254.0.1
NGINX_DS_PORT_80_TCP=tcp://10.254.45.130:80
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
KUBERNETES_PORT_443_TCP_PORT=443
KUBERNETES_PORT_443_TCP_PROTO=tcp
NGINX_DS_SERVICE_PORT_HTTP=80
KUBERNETES_SERVICE_PORT_HTTPS=443
KUBERNETES_PORT_443_TCP=tcp://10.254.0.1:443
EXPOSE_NGINX_PORT_88_TCP_ADDR=10.254.158.168
NGINX_DS_SERVICE_HOST=10.254.45.130
KUBERNETES_SERVICE_HOST=10.254.0.1
PWD=/
EXPOSE_NGINX_PORT_88_TCP_PORT=88
EXPOSE_NGINX_PORT_88_TCP_PROTO=tcp

环境变量名格式如下：
{SVCNAME}_SERVICE_HOST
{SVCNAME}_SERVICE_PORT


 DNS
DNS服务监视Kubernetes API，为每一个Service创建DNS记录用于域名解析。这样Pod中就可以通过DNS域名获取Service的访问地址。


Service – 服务发现

 
 增加和查找相关的域
 用于缓存,轻量级的dns服务


apiVersion: v1
kind: Pod
metadata:
  name: busybox
  namespace: default
spec:
  containers:
  - image: busybox
    command:
      - sleep
      - "3600"
    imagePullPolicy: IfNotPresent
    name: busybox
  restartPolicy: Always


测试解析：
#  kubectl exec -ti busybox -- nslookup kubernetes.default




[root@k8s-master ~]# cat kube-dns.yaml  
本配置可以在C:\Users\Administrator\Desktop\k8s刘振良 腾讯课程学习记录\腾讯课程资料\DNS 中找到
# Copyright 2016 The Kubernetes Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Should keep target in cluster/addons/dns-horizontal-autoscaler/dns-horizontal-autoscaler.yaml
# in sync with this file.

# Warning: This is a file generated from the base underscore template file: kube-dns.yaml.base

apiVersion: v1
kind: Service
metadata:
  name: kube-dns
  namespace: kube-system
  labels:
    k8s-app: kube-dns
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: Reconcile
    kubernetes.io/name: "KubeDNS"
spec:
  selector:
    k8s-app: kube-dns
  clusterIP: 10.10.10.2   ##此地址在下面命令中可找到
[root@k8s-node-2 ~]# ps -ef | grep kubelet
root      1411     1  2 12:34 ?        00:00:37 /opt/kubernetes/bin/kubelet --logtostderr=true --v=4 --address=192.168.224.144 --hostname-override=192.168.224.144 --kubeconfig=/opt/kubernetes/cfg/kubelet.kubeconfig --experimental-bootstrap-kubeconfig=/opt/kubernetes/cfg/bootstrap.kubeconfig --cert-dir=/opt/kubernetes/ssl --allow-privileged=true --cluster-dns=10.10.10.2 --cluster-domain=cluster.local --fail-swap-on=false --pod-infra-container-image=registry.cn-hangzhou.aliyuncs.com/google-containers/pause-amd64:3.0
root      4537  1525  0 12:57 pts/0    00:00:00 grep --color=auto kubelet


[root@k8s-node-2 ~]# cat /usr/lib/systemd/system/kubelet.service
[Unit]
Description=Kubernetes Kubelet
After=docker.service
Requires=docker.service

[Service]
EnvironmentFile=-/opt/kubernetes/cfg/kubelet
ExecStart=/opt/kubernetes/bin/kubelet $KUBELET_OPTS
Restart=on-failure
KillMode=process

[Install]
WantedBy=multi-user.target
[root@k8s-node-2 ~]#
[root@k8s-node-2 ~]#
[root@k8s-node-2 ~]#
[root@k8s-node-2 ~]#
[root@k8s-node-2 ~]# cat /opt/kubernetes/cfg/kubelet

KUBELET_OPTS="--logtostderr=true \
--v=4 \
--address=192.168.224.144 \
--hostname-override=192.168.224.144 \
--kubeconfig=/opt/kubernetes/cfg/kubelet.kubeconfig \
--experimental-bootstrap-kubeconfig=/opt/kubernetes/cfg/bootstrap.kubeconfig \
--cert-dir=/opt/kubernetes/ssl \
--allow-privileged=true \
--cluster-dns=10.10.10.2 \
--cluster-domain=cluster.local \
--fail-swap-on=false \
--pod-infra-container-image=registry.cn-hangzhou.aliyuncs.com/google-containers/pause-amd64:3.0"


所有的ip都可以通过10.10.10.2解析到相关的域名记录


  ports:
  - name: dns
    port: 53
    protocol: UDP
  - name: dns-tcp
    port: 53
    protocol: TCP
---
apiVersion: v1
kind: ServiceAccount
因为创建了rbac访问控制，所以要创建这个
metadata:
  name: kube-dns
  namespace: kube-system
  labels:
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: Reconcile
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: kube-dns
  namespace: kube-system
  labels:
    addonmanager.kubernetes.io/mode: EnsureExists
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: kube-dns
  namespace: kube-system
  labels:
    k8s-app: kube-dns
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: Reconcile
spec:
  # replicas: not specified here:
  # 1. In order to make Addon Manager do not reconcile this replicas parameter.
  # 2. Default is 1.
  # 3. Will be tuned in real time if DNS horizontal auto-scaling is turned on.
  strategy:
    rollingUpdate:
      maxSurge: 10%
      maxUnavailable: 0
  selector:
    matchLabels:
      k8s-app: kube-dns
  template:
    metadata:
      labels:
        k8s-app: kube-dns
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ''
    spec:
      tolerations:
      - key: "CriticalAddonsOnly"
        operator: "Exists"
      volumes:
      - name: kube-dns-config
        configMap:
          name: kube-dns
          optional: true
      containers:
      - name: kubedns
        image: registry.cn-hangzhou.aliyuncs.com/google_containers/k8s-dns-kube-dns-amd64:1.14.7
这里是用阿里云的镜像，官方谷歌的，pull不下来
        resources:
          # TODO: Set memory limits when we've profiled the container for large
          # clusters, then set request = limit to keep this container in
          # guaranteed class. Currently, this container falls into the
          # "burstable" category so the kubelet doesn't backoff from restarting it.
          limits:
            memory: 170Mi
          requests:
            cpu: 100m
            memory: 70Mi
        livenessProbe:
          httpGet:  健康检查
            path: /healthcheck/kubedns
            port: 10054
            scheme: HTTP
          initialDelaySeconds: 60
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 5
        readinessProbe:
          httpGet:  健康检查，用到了两种检查机制
            path: /readiness
            port: 8081
            scheme: HTTP
          # we poll on pod startup for the Kubernetes master service and
          # only setup the /readiness HTTP server once that's available.
          initialDelaySeconds: 3
          timeoutSeconds: 5
        args:
        - --domain=cluster.local.
        - --dns-port=10053
        - --config-dir=/kube-dns-config
        - --v=2
        env:
        - name: PROMETHEUS_PORT
          value: "10055"
        ports:
        - containerPort: 10053
          name: dns-local
          protocol: UDP
        - containerPort: 10053
          name: dns-tcp-local
          protocol: TCP
        - containerPort: 10055
          name: metrics
          protocol: TCP
        volumeMounts:
        - name: kube-dns-config
          mountPath: /kube-dns-config
      - name: dnsmasq
        image: registry.cn-hangzhou.aliyuncs.com/google_containers/k8s-dns-dnsmasq-nanny-amd64:1.14.7
        livenessProbe:
          httpGet:
            path: /healthcheck/dnsmasq
            port: 10054
            scheme: HTTP
          initialDelaySeconds: 60
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 5
        args:
        - -v=2
        - -logtostderr
        - -configDir=/etc/k8s/dns/dnsmasq-nanny
        - -restartDnsmasq=true
        - --
        - -k
        - --cache-size=1000
        - --no-negcache
        - --log-facility=-
        - --server=/cluster.local/127.0.0.1#10053
        - --server=/in-addr.arpa/127.0.0.1#10053
        - --server=/ip6.arpa/127.0.0.1#10053
        ports:
        - containerPort: 53
          name: dns
          protocol: UDP
        - containerPort: 53
          name: dns-tcp
          protocol: TCP
        # see: https://github.com/kubernetes/kubernetes/issues/29055 for details
        resources:
          requests:
            cpu: 150m
            memory: 20Mi
        volumeMounts:
        - name: kube-dns-config
          mountPath: /etc/k8s/dns/dnsmasq-nanny
      - name: sidecar
        image: registry.cn-hangzhou.aliyuncs.com/google_containers/k8s-dns-sidecar-amd64:1.14.7
        livenessProbe:
          httpGet:
            path: /metrics
            port: 10054
            scheme: HTTP
          initialDelaySeconds: 60
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 5
        args:
        - --v=2
        - --logtostderr
        - --probe=kubedns,127.0.0.1:10053,kubernetes.default.svc.cluster.local,5,SRV
        - --probe=dnsmasq,127.0.0.1:53,kubernetes.default.svc.cluster.local,5,SRV
        ports:
        - containerPort: 10054
          name: metrics
          protocol: TCP
        resources:
          requests:
            memory: 20Mi
            cpu: 10m
      dnsPolicy: Default  # Don't use cluster DNS.
      serviceAccountName: kube-dns



上面的配置文件可以在此找到
https://github.com/kubernetes/kubernetes/tree/master/cluster/addons/dns/kube-dns
https://github.com/kubernetes/kubernetes/blob/master/cluster/addons/dns/kube-dns/kube-dns.yaml.sed

[root@k8s-master ~]# kubectl create -f kube-dns.yaml
service "kube-dns" created
serviceaccount "kube-dns" created
configmap "kube-dns" created
deployment "kube-dns" created

[root@k8s-master ~]# kubectl get all -o wide -n kube-system
NAME                          DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE       CONTAINERS                IMAGES                                                                                                                                                                                     SELECTOR
deploy/kube-dns               1         1         1            1           1m        kubedns,dnsmasq,sidecar   registry.cn-hangzhou.aliyuncs.com/google_containers/k8s-dns-kube-dns-amd64:1.14.7,registry.cn-hangzhou.aliyuncs.com/google_containers/k8s-dns-dnsmasq-nanny-amd64:1.14.7,registry.cn-hangzhou.aliyuncs.com/google_containers/k8s-dns-sidecar-amd64:1.14.7   k8s-app=kube-dns
deploy/kubernetes-dashboard   1         1         1            1           3d        kubernetes-dashboard      registry.cn-hangzhou.aliyuncs.com/google_containers/kubernetes-dashboard-amd64:v1.7.1                                                                                                                                                                       k8s-app=kubernetes-dashboard

NAME                                 DESIRED   CURRENT   READY     AGE       CONTAINERS                IMAGES                                                                                                                                                                             SELECTOR
rs/kube-dns-9d8b5fb76                1         1         1         1m        kubedns,dnsmasq,sidecar   registry.cn-hangzhou.aliyuncs.com/google_containers/k8s-dns-kube-dns-amd64:1.14.7,registry.cn-hangzhou.aliyuncs.com/google_containers/k8s-dns-dnsmasq-nanny-amd64:1.14.7,registry.cn-hangzhou.aliyuncs.com/google_containers/k8s-dns-sidecar-amd64:1.14.7   k8s-app=kube-dns,pod-template-hash=584619632
rs/kubernetes-dashboard-698bb888c5   1         1         1         3d        kubernetes-dashboard      registry.cn-hangzhou.aliyuncs.com/google_containers/kubernetes-dashboard-amd64:v1.7.1                                                                                                                                                                       k8s-app=kubernetes-dashboard,pod-template-hash=2546644471

NAME                          DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE       CONTAINERS                IMAGES                                                                                                                                                                                     SELECTOR
deploy/kube-dns               1         1         1            1           1m        kubedns,dnsmasq,sidecar   registry.cn-hangzhou.aliyuncs.com/google_containers/k8s-dns-kube-dns-amd64:1.14.7,registry.cn-hangzhou.aliyuncs.com/google_containers/k8s-dns-dnsmasq-nanny-amd64:1.14.7,registry.cn-hangzhou.aliyuncs.com/google_containers/k8s-dns-sidecar-amd64:1.14.7   k8s-app=kube-dns
deploy/kubernetes-dashboard   1         1         1            1           3d        kubernetes-dashboard      registry.cn-hangzhou.aliyuncs.com/google_containers/kubernetes-dashboard-amd64:v1.7.1                                                                                                                                                                       k8s-app=kubernetes-dashboard

NAME                                 DESIRED   CURRENT   READY     AGE       CONTAINERS                IMAGES                                                                                                                                                                             SELECTOR
rs/kube-dns-9d8b5fb76                1         1         1         1m        kubedns,dnsmasq,sidecar   registry.cn-hangzhou.aliyuncs.com/google_containers/k8s-dns-kube-dns-amd64:1.14.7,registry.cn-hangzhou.aliyuncs.com/google_containers/k8s-dns-dnsmasq-nanny-amd64:1.14.7,registry.cn-hangzhou.aliyuncs.com/google_containers/k8s-dns-sidecar-amd64:1.14.7   k8s-app=kube-dns,pod-template-hash=584619632
rs/kubernetes-dashboard-698bb888c5   1         1         1         3d        kubernetes-dashboard      registry.cn-hangzhou.aliyuncs.com/google_containers/kubernetes-dashboard-amd64:v1.7.1                                                                                                                                                                       k8s-app=kubernetes-dashboard,pod-template-hash=2546644471

NAME                                       READY     STATUS    RESTARTS   AGE       IP            NODE
po/kube-dns-9d8b5fb76-mqtk7                3/3       Running   0          1m        172.17.65.4   192.168.224.144
po/kubernetes-dashboard-698bb888c5-l959h   1/1       Running   71         3d        172.17.7.4    192.168.224.143

NAME                       TYPE        CLUSTER-IP    EXTERNAL-IP   PORT(S)         AGE       SELECTOR
svc/kube-dns               ClusterIP   10.10.10.2    <none>        53/UDP,53/TCP   1m        k8s-app=kube-dns
svc/kubernetes-dashboard   NodePort    10.10.10.93   <none>        80:43090/TCP    3d        k8s-app=kubernetes-dashboard


测试解析：
# kubectl exec -ti busybox -- nslookup kubernetes.default

注意：如果解析不了，busybox的版本需要1.28.4才行


[root@k8s-master ~]# kubectl exec -ti busybox -- nslookup kubernetes.default.svc.cluster.local
Server:		10.10.10.2
Address:	10.10.10.2:53

Name:	kubernetes.default.svc.cluster.local
Address: 10.10.10.1

*** Can't find kubernetes.default.svc.cluster.local: No answer

[root@k8s-master ~]# kubectl get svc
NAME            TYPE        CLUSTER-IP    EXTERNAL-IP   PORT(S)   AGE
kubernetes      ClusterIP   10.10.10.1    <none>        443/TCP   3d
nginx-service   ClusterIP   10.10.10.70   <none>        88/TCP    3d



补充学习资料:京东电子书 《Kubernetes实战》 吴龙辉 51页开始
 

 
